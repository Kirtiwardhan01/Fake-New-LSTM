{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Welcome To Colaboratory",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ePsZTGQcAUc0",
        "colab_type": "text"
      },
      "source": [
        "### Stock-Price-Prediction-using-Keras-and-Recurrent-Neural-Network\n",
        "Stock Price Prediction case study using Keras"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qVqI95pnBXD6",
        "colab_type": "text"
      },
      "source": [
        "# Part 1 - Data Preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qn_DG-51ARaF",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        },
        "outputId": "57089d00-39ee-4dc8-f4f2-a83a60897176"
      },
      "source": [
        "#importing relevant packages and libraries\n",
        "!pip install pandas\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "%matplotlib inline"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.6/dist-packages (1.0.4)\n",
            "Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.6/dist-packages (from pandas) (1.18.4)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas) (2018.9)\n",
            "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/local/lib/python3.6/dist-packages (from pandas) (2.8.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.6.1->pandas) (1.12.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6_NhJXf-AnDr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "d91e8875-792a-451e-c4a1-2bc1a8949d61"
      },
      "source": [
        "#Loading the train and test dataset \n",
        "df_train = pd.read_csv('/content/Stock Price - Train csv.txt')\n",
        "\n",
        "df_test = pd.read_csv('/content/Stock Price - Test csv.txt')\n",
        "\n",
        "print(df_train.shape,df_test.shape)"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(1258, 6) (20, 6)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C94duTjhEU4b",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "training_set = df_train.iloc[:,1:2].values"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FNLw2aV7HgI0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Feature Scaling\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "ms = MinMaxScaler(feature_range=(0,1))\n",
        "training_set_scaled = ms.fit_transform(training_set)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-fE22qcII3-v",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Creating 60 timestamps\n",
        "X_train = []\n",
        "y_train = []\n",
        "\n",
        "for i in range(60,1258):\n",
        "  X_train.append(training_set_scaled[i-60:i,0])\n",
        "  y_train.append(training_set_scaled[i,0])\n",
        "\n",
        "X_train,y_train = np.array(X_train),np.array(y_train)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zGeB4R9BJO7q",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Reshaping\n",
        "X_train = np.reshape(X_train,(X_train.shape[0],X_train.shape[1],1)) "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4SX1wIerD_hI",
        "colab_type": "text"
      },
      "source": [
        "#Part 2 - Building the RNN"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-2YQYKjAKyBm",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "29cff1b9-a35a-4927-98ff-8e72de29273b"
      },
      "source": [
        "\n",
        "\n",
        "from tensorflow.keras.models import Sequential\n",
        "\n",
        "model = tf.keras.models.Sequential([\n",
        "        tf.keras.layers.LSTM(units=50,return_sequences=True, input_shape = (X_train.shape[1],1)), ## Adding a first LSTM layer and some Dropout regularisation\n",
        "        tf.keras.layers.Dropout(0.2),\n",
        "        tf.keras.layers.LSTM(units=50,return_sequences=True), ## Adding a second LSTM layer and some Dropout regularisation\n",
        "        tf.keras.layers.Dropout(0.2),\n",
        "        tf.keras.layers.LSTM(units=50,return_sequences=True), ## Adding a third LSTM layer and some Dropout regularisation\n",
        "        tf.keras.layers.Dropout(0.2),\n",
        "        tf.keras.layers.LSTM(units=50), ## Adding a fourth LSTM layer and some Dropout regularisation\n",
        "        tf.keras.layers.Dropout(0.2),\n",
        "        tf.keras.layers.Dense(units=1)])  \n",
        "\n",
        "model.compile(optimizer='adam',loss='mean_squared_error')\n",
        "\n",
        "model.fit(X_train,y_train,epochs=50,batch_size=32)"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0428 - accuracy: 0.0017\n",
            "Epoch 2/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0063 - accuracy: 0.0017\n",
            "Epoch 3/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0060 - accuracy: 0.0017\n",
            "Epoch 4/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0045 - accuracy: 0.0017\n",
            "Epoch 5/50\n",
            "38/38 [==============================] - 2s 54ms/step - loss: 0.0050 - accuracy: 0.0017\n",
            "Epoch 6/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0052 - accuracy: 0.0017\n",
            "Epoch 7/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0052 - accuracy: 0.0017\n",
            "Epoch 8/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0045 - accuracy: 0.0017\n",
            "Epoch 9/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0049 - accuracy: 0.0017\n",
            "Epoch 10/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0045 - accuracy: 0.0017\n",
            "Epoch 11/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0041 - accuracy: 0.0017\n",
            "Epoch 12/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0040 - accuracy: 0.0017\n",
            "Epoch 13/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0039 - accuracy: 0.0017\n",
            "Epoch 14/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0043 - accuracy: 0.0017\n",
            "Epoch 15/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0036 - accuracy: 0.0017\n",
            "Epoch 16/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0035 - accuracy: 0.0017\n",
            "Epoch 17/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0041 - accuracy: 0.0017\n",
            "Epoch 18/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0038 - accuracy: 0.0017\n",
            "Epoch 19/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0044 - accuracy: 0.0017\n",
            "Epoch 20/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0034 - accuracy: 0.0017\n",
            "Epoch 21/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0040 - accuracy: 0.0017\n",
            "Epoch 22/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0032 - accuracy: 0.0017\n",
            "Epoch 23/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0034 - accuracy: 0.0017\n",
            "Epoch 24/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0034 - accuracy: 0.0017\n",
            "Epoch 25/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0034 - accuracy: 0.0017\n",
            "Epoch 26/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0036 - accuracy: 0.0017\n",
            "Epoch 27/50\n",
            "38/38 [==============================] - 2s 54ms/step - loss: 0.0044 - accuracy: 0.0017\n",
            "Epoch 28/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0031 - accuracy: 0.0017\n",
            "Epoch 29/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0033 - accuracy: 0.0017\n",
            "Epoch 30/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0030 - accuracy: 0.0017\n",
            "Epoch 31/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0031 - accuracy: 0.0017\n",
            "Epoch 32/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0031 - accuracy: 0.0017\n",
            "Epoch 33/50\n",
            "38/38 [==============================] - 2s 54ms/step - loss: 0.0034 - accuracy: 0.0017\n",
            "Epoch 34/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0026 - accuracy: 0.0017\n",
            "Epoch 35/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0027 - accuracy: 0.0017\n",
            "Epoch 36/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0028 - accuracy: 0.0017\n",
            "Epoch 37/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0028 - accuracy: 0.0017\n",
            "Epoch 38/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0027 - accuracy: 0.0017\n",
            "Epoch 39/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0027 - accuracy: 0.0017\n",
            "Epoch 40/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0027 - accuracy: 0.0017\n",
            "Epoch 41/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0027 - accuracy: 0.0017\n",
            "Epoch 42/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0026 - accuracy: 0.0017\n",
            "Epoch 43/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0028 - accuracy: 0.0017\n",
            "Epoch 44/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0028 - accuracy: 0.0017\n",
            "Epoch 45/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0028 - accuracy: 0.0017\n",
            "Epoch 46/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0024 - accuracy: 0.0017\n",
            "Epoch 47/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0023 - accuracy: 0.0017\n",
            "Epoch 48/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0024 - accuracy: 0.0017\n",
            "Epoch 49/50\n",
            "38/38 [==============================] - 2s 56ms/step - loss: 0.0024 - accuracy: 0.0017\n",
            "Epoch 50/50\n",
            "38/38 [==============================] - 2s 55ms/step - loss: 0.0023 - accuracy: 0.0017\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7f30115b20f0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I9qBe5mwELqM",
        "colab_type": "text"
      },
      "source": [
        "# Part 3 - Making the predictions and visualising the results"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vZcCb9YwLi1Z",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## Getting the real stock price of 2017\n",
        "testing_set = df_test.iloc[:,1:2].values\n",
        "\n",
        "# Getting the predicted stock price of 2017\n",
        "dataset_total = pd.concat((df_train['Open'], df_test['Open']), axis = 0)\n",
        "inputs = dataset_total[len(dataset_total) - len(df_test) - 60:].values\n",
        "inputs = inputs.reshape(-1,1)\n",
        "inputs = ms.transform(inputs)\n",
        "X_test = []\n",
        "for i in range(60, 80):\n",
        "    X_test.append(inputs[i-60:i, 0])\n",
        "X_test = np.array(X_test)\n",
        "X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l8dSDRjNOQq5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "predicted_stock_price = model.predict(X_test)\n",
        "predicted_stock_price = ms.inverse_transform(predicted_stock_price)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zPYaxkNHQmhK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "c9478232-e668-44b2-be6a-0c63a86e2954"
      },
      "source": [
        "# Visualising the results\n",
        "plt.plot(testing_set, color = 'red', label = 'Real Google Stock Price')\n",
        "plt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Google Stock Price')\n",
        "plt.title('Google Stock Price Prediction')\n",
        "plt.xlabel('Time')\n",
        "plt.ylabel('Google Stock Price')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i_CR-UCmRnXA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}